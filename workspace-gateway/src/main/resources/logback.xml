<?xml version="1.0" encoding="UTF-8"?>

<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 写入格式
        encoder的默认实现类是ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="fileAppender" class="ch.qos.logback.core.FileAppender">
        <file>logs/default.log</file>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %msg%n</pattern>
        </encoder>
        <!--append: 每次写入时追加到文件末尾
        FileAppender.start()中，当prudent为true时，如果append设置为false，会被强行转成true
        prudent: 安全的，如果设置为true，不同JVM的file appenders能够安全地将日志输出到同一个文件中，
        FileAppender.safeWrite()中通过给文件通道加锁fileChannel.lock()实现-->
        <append>true</append>
        <prudent>false</prudent>
    </appender>

    <appender name="rollingAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/daily.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--前一天的文件名改为fileNamePattern，
            如果要启用压缩，需要将fileNamePattern的后缀名设置为压缩格式（比如zip、gz）
            -->
            <fileNamePattern>/logs/heuristic-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--超过30天的日志自动调用rollover()删除-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
        </encoder>
        <!--RollingFileAppender会自动覆盖append的值为true-->
        <append>false</append>
        <!--1. 如果开启prudent，则不能在压缩模式下写入文件
        2. 也会覆盖掉file属性的设置-->
        <prudent>false</prudent>

        <!--级别过滤器，拒绝ERROR等级的日志（错误日志），
        也可以将onMatch和onMismatch两项取反来捕捉ERROR等级的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
    </appender>

    <!-- name值可以是包名或具体的类名：该包（包括子包）下的类或该类将采用此logger
     所有logger默认会继承ROOT的配置，所以这里会有两个appender，会打印两次，
     加上additivity可以屏蔽继承下来的appender-->
    <logger name="com.tallate" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!-- root的默认level是INFO -->
    <root level="ERROR">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>